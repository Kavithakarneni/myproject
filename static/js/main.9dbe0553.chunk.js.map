{"version":3,"sources":["myprofile.js","App.js","serviceWorker.js","index.js"],"names":["Myprofile","indexValue","this","props","location","data","id","specificProfile","Data","profiles","className","text-color","basicInformation","name","role","href","email","mobile","education","map","i","j","degree","institution","Skills","Summery","Component","Home","info","index","key","to","pathname","App","exact","path","component","l","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAwEgBA,E,uKA1DR,IAAIC,EAAWC,KAAKC,MAAMC,SAASC,KAAKC,GACpCC,EAAgBC,EAAKC,SAASR,GACjC,OACI,6BAASS,UAAU,SAASC,aAAW,kBACnC,yBAAKD,UAAU,QACX,yBAAKA,UAAU,YACX,4BAAKH,EAAgBK,iBAAiBC,MACtC,4BAAI,4BAAKN,EAAgBK,iBAAiBE,QAG9C,yBAAKJ,UAAU,eACf,uBAAGK,KAAM,UAAUR,EAAgBK,iBAAiBI,OAC5DT,EAAgBK,iBAAiBI,OAAU,6BAE9C,uBAAGD,KAAM,OAAOR,EAAgBK,iBAAiBK,QAC9CV,EAAgBK,iBAAiBK,UAG7B,yBAAKP,UAAU,SACZ,yBAAKA,UAAU,eACX,2DAEJ,yBAAKA,UAAU,YACVH,EAAgBW,UAAUC,KAAI,SAACC,EAAEC,GAAH,OAC3B,4BACA,4BAAKD,EAAEE,QACP,2BAAIF,EAAEG,iBAGV,yBAAKb,UAAU,eACX,uCAEJ,yBAAKA,UAAU,YACdH,EAAgBiB,OAAOL,KAAK,SAAAC,GAAC,OAC1B,4BACA,4BAAKA,OAIT,yBAAKV,UAAU,eACX,wCAEJ,yBAAKA,UAAU,YACdH,EAAgBkB,QAAQN,KAAK,SAAAC,GAAC,OAC3B,4BACA,4BAAKA,gB,GA/CRM,aCYvB,IAAIC,EAAK,WACP,IAAIC,EAAKpB,EAAKC,SACd,OACE,6BAASC,UAAU,UAChBkB,EAAKT,KAAI,SAACC,EAAES,GAAH,OACV,yBAAKnB,UAAU,OAAOoB,IAAKD,GACzB,yBAAKnB,UAAU,YACf,gCAAMU,EAAER,iBAAiBC,MAAU,6BACnC,gCAAK,4BAAKO,EAAER,iBAAiBE,QAG/B,yBAAKJ,UAAU,eACX,kBAAC,IAAD,CAAMqB,GAAI,CAACC,SAAS,aAAa3B,KAAK,CAACC,GAAGuB,KAA1C,0BASGI,EAvCf,WACE,IAAIL,EAAKpB,EAAKC,SACZ,OACE,iCACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,aAAaC,UAAWpC,IACxC,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,4BAAQjB,UAAU,UACfkB,EAAKT,KAAI,SAAAkB,GAAC,OACb,kBAAC,IAAD,CAAMN,GAAI,CAACC,SAAS,aAAa3B,KAAK,CAACC,GAAG+B,IAAKP,IAAKO,GAAIrC,UCH5CsC,QACW,cAA7BC,OAAOnC,SAASoC,UAEe,UAA7BD,OAAOnC,SAASoC,UAEhBD,OAAOnC,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9dbe0553.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './App.css';\r\nimport Data from './data/data.json';\r\n//import { Route } from 'react-router-dom';\r\n //let Myprofile=()=>{\r\n     //return(\r\n         //<div>\r\n             //<h4>myprofile content</h4>\r\n         //</div>\r\n     //)\r\n //}\r\n //export default Myprofile;\r\n class Myprofile extends Component{\r\n     render(){\r\n        var indexValue=this.props.location.data.id;\r\n        var specificProfile=Data.profiles[indexValue];\r\n         return(\r\n             <section className=\"parent\" text-color=\"rgb(27, 3, 83)\">\r\n                 <div className=\"card\">\r\n                     <div className=\"card-top\">\r\n                         <h3>{specificProfile.basicInformation.name}</h3>\r\n                         <h3><em>{specificProfile.basicInformation.role}</em></h3>\r\n                \r\n                     </div>\r\n                     <div className=\"card-bottom\">\r\n                     <a href={\"mailto:\"+specificProfile.basicInformation.email}>\r\n            {specificProfile.basicInformation.email}</a><br />\r\n            \r\n          <a href={\"tel:\"+specificProfile.basicInformation.mobile}>\r\n            {specificProfile.basicInformation.mobile}</a>\r\n                     </div>\r\n                 </div>\r\n                 <div className=\"card2\">\r\n                    <div className=\"card-bottom\">\r\n                        <h7>Educational Qualifications</h7>\r\n                    </div>\r\n                    <div className=\"card-top\">\r\n                        {specificProfile.education.map((i,j)=>(\r\n                            <ul>\r\n                            <li>{i.degree}</li>\r\n                            <p>{i.institution}</p>\r\n                            </ul>\r\n                        ))}\r\n                        <div className=\"card-bottom\">\r\n                            <h7>Skills</h7>\r\n                        </div>\r\n                        <div className=\"card-top\">\r\n                        {specificProfile.Skills.map((i=>\r\n                            <ul>\r\n                            <li>{i}</li>\r\n            \r\n                            </ul>\r\n                        ))}\r\n                        <div className=\"card-bottom\">\r\n                            <h7>Summery</h7>\r\n                        </div>\r\n                        <div className=\"card-top\">\r\n                        {specificProfile.Summery.map((i=>\r\n                            <ul>\r\n                            <li>{i}</li>\r\n            \r\n                            </ul>\r\n                        ))}\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                 </div>\r\n             </section>\r\n         )\r\n     }\r\n }\r\n export default Myprofile;","import React from 'react';\nimport \"./App.css\";\nimport Data from './data/data.json';\nimport {BrowserRouter,Route,Link} from 'react-router-dom';\nimport Myprofile from './myprofile.js';\n\nfunction App(){\n  var info=Data.profiles;\n    return(\n      <section>\n      <BrowserRouter>\n      <Route exact path=\"/myprofile\" component={Myprofile}/>\n        <Route exact path=\"/\" component={Home}/>\n        <header className=\"header\">\n          {info.map(l=>(\n        <Link to={{pathname:\"/myprofile\",data:{id:l}}} key={l}>{Myprofile}</Link>\n        ))}\n        </header>\n        </BrowserRouter>\n        \n      \n      </section>\n    )\n  }\n  let Home=()=>{\n    var info=Data.profiles;\n    return(\n      <section className=\"parent\">\n        {info.map((i,index)=>(\n        <div className=\"card\" key={index}>\n          <div className=\"card-top\">\n          <h2> {i.basicInformation.name}</h2><br />\n          <h5> <em>{i.basicInformation.role}</em></h5>\n        </div>\n\n        <div className=\"card-bottom\">\n            <Link to={{pathname:\"/myprofile\",data:{id:index}}}>view profiles>></Link>\n        </div>\n        </div>\n      ))}\n\n      </section>\n    )\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}